t.bf2 = (dbar2.1 - dbar2.2) / (s2 * sqrt((2 / 5)))
d3.1 = abs(residuals[sample3.1] - median(residuals[sample3.1]))
dbar3.1 = mean(d3.1)
d3.2 = abs(residuals[sample3.2] - median(residuals[sample3.2]))
dbar3.2 = mean(d3.2)
s3 = sqrt((sum((d3.1 - dbar3.1) ^ 2) + sum((d3.2 - dbar3.2) ^ 2)) / 8)
t.bf3 = (dbar3.1 - dbar3.2) / (s3 * sqrt((2 / 5)))
d4.1 = abs(residuals[sample4.1] - median(residuals[sample4.1]))
dbar4.1 = mean(d4.1)
d4.2 = abs(residuals[sample4.2] - median(residuals[sample4.2]))
dbar4.2 = mean(d4.2)
s4 = sqrt((sum((d4.1 - dbar4.1) ^ 2) + sum((d4.2 - dbar4.2) ^ 2)) / 8)
t.bf4 = (dbar4.1 - dbar4.2) / (s4 * sqrt((2 / 5)))
d5.1 = abs(residuals[sample5.1] - median(residuals[sample5.1]))
dbar5.1 = mean(d5.1)
d5.2 = abs(residuals[sample5.2] - median(residuals[sample5.2]))
dbar5.2 = mean(d5.2)
s5 = sqrt((sum((d5.1 - dbar5.1) ^ 2) + sum((d5.2 - dbar5.2) ^ 2)) / 8)
t.bf5 = (dbar5.1 - dbar5.2) / (s5 * sqrt((2 / 5)))
d6.1 = abs(residuals[sample6.1] - median(residuals[sample6.1]))
dbar6.1 = mean(d6.1)
d6.2 = abs(residuals[sample6.2] - median(residuals[sample6.2]))
dbar6.2 = mean(d6.2)
s6 = sqrt((sum((d6.1 - dbar6.1) ^ 2) + sum((d6.2 - dbar6.2) ^ 2)) / 8)
t.bf6 = (dbar6.1 - dbar6.2) / (s6 * sqrt((2 / 5)))
#compare t-values to this
#abs(qt(0.025, 8)) #if t-values found above are greater, then this is evidence against the null hypothesis of constant variance
table4 = data.frame(c(round(abs(qt(0.025, 8)), 4), round(t.bf1, 4), round(t.bf2, 4), round(t.bf3, 4), round(t.bf4, 4), round(t.bf5, 4), round(t.bf6, 4)))
row.names(table4) = c("t-value to compare to", "sample 1 t-value", "sample 2 t-value", "sample 3 t-value", "sample 4 t-value", "sample 5 t-value", "sample 6 t-value")
table4 = cbind(table4, evaluation)
colnames(table4) = c("t-value", "Significant?")
table4
bptest(lm(y ~ x, data1)) #test for constant variance - big p-value - constant variance - to compare to manual BF test
Yhat
Yhat = X %*% beta
Yhat
#View(airfreight)
#beta = (X'X)^-1 * X'Y
Y = NumberOfAmpules
X = cbind(1, ShipmentRoute)
beta = solve(t(X) %*% X) %*% t(X) %*% Y #following equation for beta
beta #outputting coefficients
Yhat = X %*% beta
Yhat
error = Y - Yhat
error
Yhat = X %*% beta #estimates of Y based on x values
residuals2b = Y - Yhat #residuals
#residual sum of squares
RSS = sum(residuals2b ^ 2)
RSS
t(residuals2b) %*% residuals2b
#p-values for significance of terms
1 - pt(t, nrow(X) - 1)
#p-values for significance of terms
1 - pt(t, na - 1)
#standard error
na = nrow(airfreight)
#p-values for significance of terms
1 - pt(t, na - 1)
sd(error) * sqrt((na - 1) / (na - 2)) #
se
vare = RSS / (na - ncol(X))
vare
varCov = varResid * solve((t(X) %*% X))
varResid = RSS / (na - ncol(X)) #variance of residuals
varResid
varCov = varResid * solve((t(X) %*% X))
varCov
stderror = sqrt(diag(varCov))
stderror
t(stderror)
print(cbind(beta, stderror))
cbind(beta, stderror)
Yhat = X %*% beta #estimates of Y based on x values
residuals2b = Y - Yhat #residuals
#residual sum of squares
RSS = sum(residuals2b ^ 2) #residual sum of squares
#calculating R squared
TSS = sum((NumberOfAmpules - mean(NumberOfAmpules)) ^ 2) #total sum of squares
#Rsquared = 1 - RSS / TSS #R2 value
#standard error of residuals
na = nrow(airfreight) #for degrees of freedom
#rse = sqrt((RSS) / (na - ncol(X))) #residualstandard error formula
#sd(residuals2b) * sqrt((na - 1) / (na - 2)) #another way of calculating se - gives same value
varResid = RSS / (na - ncol(X)) #variance of residuals
varResid
varCov = varResid * solve((t(X) %*% X))
stderror = sqrt(diag(varCov))
#t(stderror)
#cbind(beta, stderror)
#confidence intervals
confintlwr = beta - 2.306 * stderror #t-value for 0.025 df = 8
confintupr = beta + 2.306 * stderror
table1 = cbind(beta, confintlwr, confintupr)
colnames(table1) = c("Estimate", "2.5%", "97.5%")
rownames(table1) = c("beta0", "beta1")
table1
confint(lm(NumberOfAmpules ~ ShipmentRoute)) #comparing to actual values
ncol(x)
ncol(X)
table1 #print
#confidence intervals
qt(0.025, 8)
confintlwr = beta + qt(0.025, 8) * stderror #t-value for 0.025 df = 8 is 2.306
confintupr = beta + abs(qt(0.025, 8)) * stderror
table1 = cbind(beta, confintlwr, confintupr)
colnames(table1) = c("Estimate", "2.5%", "97.5%")
rownames(table1) = c("beta0", "beta1")
table1 #print confidence interval with the estimated value
confint(lm(NumberOfAmpules ~ ShipmentRoute)) #comparing to actual values
table1 #print confidence interval with the estimated value
confint(lm(NumberOfAmpules ~ ShipmentRoute)) #comparing to actual values
Yhat = X %*% beta #estimates of Y based on x values
residuals2b = Y - Yhat #residuals
#residual sum of squares
RSS = sum(residuals2b ^ 2) #residual sum of squares
varResid = RSS / (nrow(airfreight) - ncol(X)) #variance of residuals
varCov = varResid * solve((t(X) %*% X))
stderror = sqrt(diag(varCov))
#confidence intervals
confintlwr = beta + qt(0.025, 8) * stderror #t-value for 0.025 df = 8 is 2.306, finding the lower bound of confidence interval
confintupr = beta + abs(qt(0.025, 8)) * stderror #finding the lower bound of confidence interval
table1 = cbind(beta, confintlwr, confintupr) #putting results into a table
colnames(table1) = c("Estimate", "2.5%", "97.5%") #labeling columns of table
rownames(table1) = c("beta0", "beta1") #labeling rows of table
table1 #print confidence interval with the estimated value
#confint(lm(NumberOfAmpules ~ ShipmentRoute)) #comparing to actual values - spot on!!
Yhat = X %*% beta #estimates of Y based on x values
residuals2b = Y - Yhat #residuals
#residual sum of squares
RSS = sum(residuals2b ^ 2) #residual sum of squares
varResid = RSS / (nrow(airfreight) - ncol(X)) #variance of residuals
varCov = varResid * solve((t(X) %*% X))
stderror = sqrt(diag(varCov))
#confidence intervals
confintlwr = beta + qt(0.025, 8) * stderror #t-value for 0.025 df = 8 is 2.306, finding the lower bound of confidence interval
confintupr = beta + abs(qt(0.025, 8)) * stderror #finding the lower bound of confidence interval
table1 = round(cbind(beta, confintlwr, confintupr), 4) #putting results into a table
colnames(table1) = c("Estimate", "2.5%", "97.5%") #labeling columns of table
rownames(table1) = c("beta0", "beta1") #labeling rows of table
table1 #print confidence interval with the estimated value
#confint(lm(NumberOfAmpules ~ ShipmentRoute)) #comparing to actual values - spot on!!
t
#p-values for significance of terms
1 - pt(t, na - 1)
#p-values for significance of terms
round(1 - pt(t, na - 1), 4)
cbind(beta, stderror, t, 1 - pt(t, nrow(X) - 1))
table1.2 = cbind(beta, stderror, t, 1 - pt(t, nrow(X) - 1))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(1 - pt(t, nrow(X) - 1)), 6)
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(1 - pt(t, nrow(X) - 1), 6))
#t values
tStat = beta / stderror #finding t statistic for both coefficients
#p-values for significance of terms
1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(1 - pt(t, nrow(X) - 1), 6))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(1 - pt(t, nrow(X) - 1), 4))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(1 - pt(t, nrow(X) - 1), 5))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
#p-values for significance of terms
pVals = 1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(pVals, 5))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
#p-values for significance of terms
pVals = 1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(pVals, 5))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
TSS = sum((NumberOfAmpules - mean(NumberOfAmpules)) ^ 2) #total sum of squares
Rsquared = 1 - RSS / TSS #R2 value
Rsquared
1 - pf(Ftest, (ncol(X) - 1), (nrow(X) - ncol(X)))
#anova table
ESS = TSS - RSS
MSR = RSS / (nrow(X) - ncol(X))
Ftest = MSE / MSR
Ftest
1 - pf(Ftest, (ncol(X) - 1), (nrow(X) - ncol(X)))
print(c("R-squared value:", Rsquared)) #high value means it is a good fit
R2 = matrix(c(Rsquared))
R2
row.names = c("R-squared value:")
row.names(R2) = c("R-squared value:")
R2
Ftest = c(FStat, fpVal)
FStat = MSE / MSR
FStat
Ftest = c(FStat, fpVal)
fpVal = 1 - pf(Ftest, (ncol(X) - 1), (nrow(X) - ncol(X)))
Ftest = c(FStat, fpVal)
row.names(Ftest) = "F test result:"
row.names(Ftest) = c("F test result:")
fpVal = 1 - pf(Ftest, (ncol(X) - 1), (nrow(X) - ncol(X)))
Ftest = c(FStat, fpVal)
row.names(Ftest) = c("F test result:")
Ftest
FStat
fpVal = 1 - pf(Ftest, (ncol(X) - 1), (nrow(X) - ncol(X)))
fpVal
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X)))
fpVal
Ftest = c(FStat, fpVal)
Ftest
FStat
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X)))
fpVal
FStat = MSE / MSR
FStat
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X)))
fpVal
Ftest = round(c(FStat, fpVal), 4)
Ftest
Ftest = round(c(FStat, fpVal), 5)
Ftest
row.names(Ftest) = c("F test result:")
Ftest
Ftest = matrix(round(c(FStat, fpVal), 5))
Ftest
row.names(Ftest) = c("F test result:")
Ftest = matrix(round(c(FStat, fpVal), 5), byrow = TRUE)
Ftest
Ftest = matrix(round(c(FStat, fpVal), 5), bycol = TRUE)
Ftest
?matrix
Ftest = matrix(round(c(FStat, fpVal), 5), byrow = TRUE)
Ftest
Ftest = matrix(round(c(FStat, fpVal), 5), byrow = FALSE)
Ftest
Ftest = matrix(round(c(FStat, fpVal), 5), nrow = 1, ncol = 2)
Ftest
row.names(Ftest) = c("F test result:")
Ftest
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
FStat
#t values
tStat = beta / stderror #finding t statistic for both coefficients
#p-values for significance of terms
pVals = 1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(pVals, 5))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
#calculating R squared
TSS = sum((NumberOfAmpules - mean(NumberOfAmpules)) ^ 2) #total sum of squares
Rsquared = 1 - RSS / TSS #R2 value
R2 = matrix(c(Rsquared))
row.names(R2) = c("R-squared value:")
R2
#anova table
ESS = TSS - RSS
MSE = ESS / (ncol(X) - 1)
MSR = RSS / (nrow(X) - ncol(X))
FStat = MSE / MSR #F statistic
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X))) #p-value of F stat with df
Ftest = matrix(round(c(FStat, fpVal), 5), nrow = 1, ncol = 2)
row.names(Ftest) = c("F test result:")
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
Ftest = matrix(c(round(FStat, 4), round(fpVal, 5)), nrow = 1, ncol = 2)
row.names(Ftest) = c("F test result:")
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
Ftest = matrix(c(round(FStat, 4), round(fpVal, 4)), nrow = 1, ncol = 2)
row.names(Ftest) = c("F test result:")
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
#t values
tStat = beta / stderror #finding t statistic for both coefficients
#p-values for significance of terms
pVals = 1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(pVals, 6))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
#calculating R squared
TSS = sum((NumberOfAmpules - mean(NumberOfAmpules)) ^ 2) #total sum of squares
Rsquared = 1 - RSS / TSS #R2 value
R2 = matrix(c(Rsquared))
row.names(R2) = c("R-squared value:")
R2
#anova table
ESS = TSS - RSS
MSE = ESS / (ncol(X) - 1)
MSR = RSS / (nrow(X) - ncol(X))
FStat = MSE / MSR #F statistic
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X))) #p-value of F stat with df
Ftest = matrix(c(round(FStat, 4), round(fpVal, 5)), nrow = 1, ncol = 2)
row.names(Ftest) = c("F test result:")
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
#t values
tStat = beta / stderror #finding t statistic for both coefficients
#p-values for significance of terms
pVals = 1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(pVals, 7))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
#calculating R squared
TSS = sum((NumberOfAmpules - mean(NumberOfAmpules)) ^ 2) #total sum of squares
Rsquared = 1 - RSS / TSS #R2 value
R2 = matrix(c(Rsquared))
row.names(R2) = c("R-squared value:")
R2
#anova table
ESS = TSS - RSS
MSE = ESS / (ncol(X) - 1)
MSR = RSS / (nrow(X) - ncol(X))
FStat = MSE / MSR #F statistic
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X))) #p-value of F stat with df
Ftest = matrix(c(round(FStat, 4), round(fpVal, 5)), nrow = 1, ncol = 2)
row.names(Ftest) = c("F test result:")
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
#t values
tStat = beta / stderror #finding t statistic for both coefficients
#p-values for significance of terms
pVals = 1 - pt(t, na - 1)
table1.2 = cbind(beta, round(stderror, 4), round(tStat, 4), round(pVals, 6))
colnames(table1.2) = c("Estimate", "Standard Error", "t-Statistic", "p-value") #labeling columns of table
rownames(table1.2) = c("beta0", "beta1") #labeling rows of table
table1.2
#calculating R squared
TSS = sum((NumberOfAmpules - mean(NumberOfAmpules)) ^ 2) #total sum of squares
Rsquared = 1 - RSS / TSS #R2 value
R2 = matrix(c(Rsquared))
row.names(R2) = c("R-squared value:")
R2
#anova table
ESS = TSS - RSS
MSE = ESS / (ncol(X) - 1)
MSR = RSS / (nrow(X) - ncol(X))
FStat = MSE / MSR #F statistic
fpVal = 1 - pf(FStat, (ncol(X) - 1), (nrow(X) - ncol(X))) #p-value of F stat with df
Ftest = matrix(c(round(FStat, 4), round(fpVal, 5)), nrow = 1, ncol = 2)
row.names(Ftest) = c("F test result:")
colnames(Ftest) = c("F Statistic", "p-Value")
Ftest
Yhat = X %*% beta #estimates of Y based on x values
residuals2b = Y - Yhat #residuals
#residual sum of squares
SSR = sum(residuals2b ^ 2) #residual sum of squares
varResid = SSR / (nrow(airfreight) - ncol(X)) #variance of residuals
varCov = varResid * solve((t(X) %*% X))
stderror = sqrt(diag(varCov))
#confidence intervals
confintlwr = beta + qt(0.025, 8) * stderror #t-value for 0.025 df = 8 is 2.306, finding the lower bound of confidence interval
confintupr = beta + abs(qt(0.025, 8)) * stderror #finding the lower bound of confidence interval
table1 = round(cbind(beta, confintlwr, confintupr), 4) #putting results into a table
colnames(table1) = c("Estimate", "2.5%", "97.5%") #labeling columns of table
rownames(table1) = c("beta0", "beta1") #labeling rows of table
table1 #print confidence interval with the estimated value
#confint(lm(NumberOfAmpules ~ ShipmentRoute)) #comparing to actual values - spot on!!
#p-values for significance of terms
pVals = 1 - pt(t, nrow(airfreight) - 1)
#p-values for significance of terms
pVals = 1 - pt(t, nrow(airfreight) - 1)
pVals
#p-values for significance of terms
pVals = 1 - pt(t, nrow(airfreight) - 1)
#p-values for significance of terms
pVals = 1 - pt(tStat, nrow(X) - 1)
residuals[sample1.1]
#bringing in the data
x = seq(0, 9, 1)
y = c(98, 135, 162, 178, 221, 232, 283, 300, 374, 395)
#creating a dataframe from the data
data1 = data.frame(x, y)
sample1 = sample(1:10, size = 10, replace = FALSE) #first create a sample of the 10 indices in random order without replacement
sample1.1 = vector(length = 5) #create a vector to store the first 5
sample1.2 = vector(length = 5) #and last 5 random indices
for (i in 1:5) {
sample1.1[i] = sample1[i] #group the first half of the random indices together
}
for (i in 6:10) {
sample1.2[i - 5] = sample1[i] #and the rest in another group
}
#repeat this for the other 5 random samples
sample2 = sample(1:10, size = 10, replace = FALSE)
sample2.1 = vector(length = 5)
sample2.2 = vector(length = 5)
for (i in 1:5) {
sample2.1[i] = sample2[i]
}
for (i in 6:10) {
sample2.2[i - 5] = sample2[i]
}
sample3 = sample(1:10, size = 10, replace = FALSE)
sample3.1 = vector(length = 5)
sample3.2 = vector(length = 5)
for (i in 1:5) {
sample3.1[i] = sample3[i]
}
for (i in 6:10) {
sample3.2[i - 5] = sample3[i]
}
sample4 = sample(1:10, size = 10, replace = FALSE)
sample4.1 = vector(length = 5)
sample4.2 = vector(length = 5)
for (i in 1:5) {
sample4.1[i] = sample4[i]
}
for (i in 6:10) {
sample4.2[i - 5] = sample4[i]
}
sample5 = sample(1:10, size = 10, replace = FALSE)
sample5.1 = vector(length = 5)
sample5.2 = vector(length = 5)
for (i in 1:5) {
sample5.1[i] = sample5[i]
}
for (i in 6:10) {
sample5.2[i - 5] = sample5[i]
}
sample6 = sample(1:10, size = 10, replace = FALSE)
sample6.1 = vector(length = 5)
sample6.2 = vector(length = 5)
for (i in 1:5) {
sample6.1[i] = sample6[i]
}
for (i in 6:10) {
sample6.2[i - 5] = sample6[i]
}
#now, follow the formula for the two sample t statistic in the BF test
d1.1 = abs(residuals[sample1.1] - median(residuals[sample1.1])) #residuals minus median of first group
dbar1.1 = mean(d1.1) #sample mean of d1's
d1.2 = abs(residuals[sample1.2] - median(residuals[sample1.2])) #residuals minus median of second group
dbar1.2 = mean(d1.2) #sample mean of d2's
s1 = sqrt((sum((d1.1 - dbar1.1) ^ 2) + sum((d1.2 - dbar1.2) ^ 2)) / 8) #equation for s
t.bf1 = (dbar1.1 - dbar1.2) / (s1 * sqrt((2 / 5))) #equation for two sample t test statistic
#repeat the above steps for the next 5 groups of two
d2.1 = abs(residuals[sample2.1] - median(residuals[sample2.1]))
dbar2.1 = mean(d2.1)
d2.2 = abs(residuals[sample2.2] - median(residuals[sample2.2]))
dbar2.2 = mean(d2.2)
s2 = sqrt((sum((d2.1 - dbar2.1) ^ 2) + sum((d2.2 - dbar2.2) ^ 2)) / 8)
t.bf2 = (dbar2.1 - dbar2.2) / (s2 * sqrt((2 / 5)))
d3.1 = abs(residuals[sample3.1] - median(residuals[sample3.1]))
dbar3.1 = mean(d3.1)
d3.2 = abs(residuals[sample3.2] - median(residuals[sample3.2]))
dbar3.2 = mean(d3.2)
s3 = sqrt((sum((d3.1 - dbar3.1) ^ 2) + sum((d3.2 - dbar3.2) ^ 2)) / 8)
t.bf3 = (dbar3.1 - dbar3.2) / (s3 * sqrt((2 / 5)))
d4.1 = abs(residuals[sample4.1] - median(residuals[sample4.1]))
dbar4.1 = mean(d4.1)
d4.2 = abs(residuals[sample4.2] - median(residuals[sample4.2]))
dbar4.2 = mean(d4.2)
s4 = sqrt((sum((d4.1 - dbar4.1) ^ 2) + sum((d4.2 - dbar4.2) ^ 2)) / 8)
t.bf4 = (dbar4.1 - dbar4.2) / (s4 * sqrt((2 / 5)))
d5.1 = abs(residuals[sample5.1] - median(residuals[sample5.1]))
dbar5.1 = mean(d5.1)
d5.2 = abs(residuals[sample5.2] - median(residuals[sample5.2]))
dbar5.2 = mean(d5.2)
s5 = sqrt((sum((d5.1 - dbar5.1) ^ 2) + sum((d5.2 - dbar5.2) ^ 2)) / 8)
t.bf5 = (dbar5.1 - dbar5.2) / (s5 * sqrt((2 / 5)))
d6.1 = abs(residuals[sample6.1] - median(residuals[sample6.1]))
dbar6.1 = mean(d6.1)
d6.2 = abs(residuals[sample6.2] - median(residuals[sample6.2]))
dbar6.2 = mean(d6.2)
s6 = sqrt((sum((d6.1 - dbar6.1) ^ 2) + sum((d6.2 - dbar6.2) ^ 2)) / 8)
t.bf6 = (dbar6.1 - dbar6.2) / (s6 * sqrt((2 / 5)))
#compare t-values to this
#abs(qt(0.025, 8)) #if t-values found above are greater, then this is evidence against the null hypothesis of constant variance
table4 = data.frame(c(round(abs(qt(0.025, 8)), 4), round(t.bf1, 4), round(t.bf2, 4), round(t.bf3, 4), round(t.bf4, 4), round(t.bf5, 4), round(t.bf6, 4)))
row.names(table4) = c("t-value to compare to", "sample 1 t-value", "sample 2 t-value", "sample 3 t-value", "sample 4 t-value", "sample 5 t-value", "sample 6 t-value")
table4 = cbind(table4, evaluation)
colnames(table4) = c("t-value", "Significant?")
table4
bptest(lm(y ~ x, data1)) #test for constant variance - big p-value - constant variance - to compare to manual BF test
residuals = y - mean(y)
residuals
table4
n = length(airfreight$NumberOfAmpules)
M = 1000 #number of bootstraps
beta0 = numeric(M) #vector to hold results for beta0
beta1 = numeric(M) #and beta1
for (m in 1:M) {
i = sample(x = 1:n, size = n, replace = TRUE) #sampling command from the assignment
X2 = cbind(1, ShipmentRoute[i]) #adding 1 vector to vector of xi's
Y2 = NumberOfAmpules[i] #get corresponding y data
beta = solve(t(X2) %*% X2) %*% t(X2) %*% Y2 #getting estimates for beta0 and beta1
beta0[m] = beta[1, 1] #separating beta0
beta1[m] = beta[2, 1] #and beta1
}
beta.conf = rbind(quantile(beta0, probs = c(0.025, 0.975)), quantile(beta1, probs = c(0.025, 0.975))) #confidence intervals for beta's from bootstrap
betahat = c(round(mean(beta0), 4), round(mean(beta1), 4)) #estimate for beta's from bootstrap
table3 = cbind(betahat, round(beta.conf, 4)) #putting them together in a table
rownames(table3) = c("beta0", "beta1") #labeling rows of table
colnames(table3) = c("Estimate", "2.5%", "97.5%") #labeling columns of table
table3 #outputting results
confint(lm(NumberOfAmpules ~ ShipmentRoute))
clr(list = ls())
rm(list = ls())
